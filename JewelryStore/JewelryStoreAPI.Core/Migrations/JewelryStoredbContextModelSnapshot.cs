// <auto-generated />
using System;
using JewelryStoreAPI.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace JewelryStoreAPI.Core.Migrations
{
    [DbContext(typeof(JewelryStoredbContext))]
    partial class JewelryStoredbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("JewelryStoreAPI.Domain.Entities.Basket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("JewelryStoreAPI.Domain.Entities.BijouterieType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BijouterieTypeName")
                        .IsRequired()
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("BijouterieTypeName")
                        .IsUnique();

                    b.ToTable("BijouterieTypes");
                });

            modelBuilder.Entity("JewelryStoreAPI.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("BrandName")
                        .IsUnique();

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("JewelryStoreAPI.Domain.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("ColorName")
                        .IsUnique();

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("JewelryStoreAPI.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("CountryName")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("JewelryStoreAPI.Domain.Entities.MetalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("MetalTypeName")
                        .IsRequired()
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("MetalTypeName")
                        .IsUnique();

                    b.ToTable("MetalTypes");
                });

            modelBuilder.Entity("JewelryStoreAPI.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BasketId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("OrderTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("JewelryStoreAPI.Domain.Entities.PreciousMetalMaterialType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("PreciousMetalMaterialTypeName")
                        .IsRequired()
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("PreciousMetalMaterialTypeName")
                        .IsUnique();

                    b.ToTable("PreciousMetalMaterialTypes");
                });

            modelBuilder.Entity("JewelryStoreAPI.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<int>("JewelryType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CountryId");

                    b.ToTable("Products");

                    b.HasDiscriminator<int>("JewelryType").HasValue(0);
                });

            modelBuilder.Entity("JewelryStoreAPI.Domain.Entities.ProductBasket", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("BasketId")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "BasketId");

                    b.HasIndex("BasketId");

                    b.ToTable("ProductBaskets");
                });

            modelBuilder.Entity("JewelryStoreAPI.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("JewelryStoreAPI.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JewelryStoreAPI.Domain.Entities.Bijouterie", b =>
                {
                    b.HasBaseType("JewelryStoreAPI.Domain.Entities.Product");

                    b.Property<int>("BijouterieTypeId")
                        .HasColumnType("integer");

                    b.HasIndex("BijouterieTypeId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("JewelryStoreAPI.Domain.Entities.PreciousMetalMaterial", b =>
                {
                    b.HasBaseType("JewelryStoreAPI.Domain.Entities.Product");

                    b.Property<int>("MetalTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("PreciousMetalMaterialTypeId")
                        .HasColumnType("integer");

                    b.HasIndex("MetalTypeId");

                    b.HasIndex("PreciousMetalMaterialTypeId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("JewelryStoreAPI.Domain.Entities.Watch", b =>
                {
                    b.HasBaseType("JewelryStoreAPI.Domain.Entities.Product");

                    b.Property<int?>("CaseColorId")
                        .HasColumnType("integer");

                    b.Property<int?>("DialColorId")
                        .HasColumnType("integer");

                    b.Property<int>("DiameterMM")
                        .HasColumnType("integer");

                    b.Property<int?>("StrapColorId")
                        .HasColumnType("integer");

                    b.HasIndex("CaseColorId");

                    b.HasIndex("DialColorId");

                    b.HasIndex("StrapColorId");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("JewelryStoreAPI.Domain.Entities.Basket", b =>
                {
                    b.HasOne("JewelryStoreAPI.Domain.Entities.User", "User")
                        .WithMany("Baskets")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Baskets_To_Users")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JewelryStoreAPI.Domain.Entities.Order", b =>
                {
                    b.HasOne("JewelryStoreAPI.Domain.Entities.Basket", "Basket")
                        .WithMany("Orders")
                        .HasForeignKey("BasketId")
                        .HasConstraintName("FK_Orders_To_Baskets")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JewelryStoreAPI.Domain.Entities.Product", b =>
                {
                    b.HasOne("JewelryStoreAPI.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_Products_To_Brands")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JewelryStoreAPI.Domain.Entities.Country", "Country")
                        .WithMany("Products")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Products_To_Countries")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JewelryStoreAPI.Domain.Entities.ProductBasket", b =>
                {
                    b.HasOne("JewelryStoreAPI.Domain.Entities.Basket", "Basket")
                        .WithMany("ProductBaskets")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JewelryStoreAPI.Domain.Entities.Product", "Product")
                        .WithMany("ProductBaskets")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JewelryStoreAPI.Domain.Entities.User", b =>
                {
                    b.HasOne("JewelryStoreAPI.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Users_To_Roles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JewelryStoreAPI.Domain.Entities.Bijouterie", b =>
                {
                    b.HasOne("JewelryStoreAPI.Domain.Entities.BijouterieType", "BijouterieType")
                        .WithMany("Bijouteries")
                        .HasForeignKey("BijouterieTypeId")
                        .HasConstraintName("FK_Bijouteries_To_BijouterieTypes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JewelryStoreAPI.Domain.Entities.PreciousMetalMaterial", b =>
                {
                    b.HasOne("JewelryStoreAPI.Domain.Entities.MetalType", "MetalType")
                        .WithMany("PreciousMetalMaterials")
                        .HasForeignKey("MetalTypeId")
                        .HasConstraintName("FK_PreciousMetalMaterials_To_MetalTypeTypes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JewelryStoreAPI.Domain.Entities.PreciousMetalMaterialType", "PreciousMetalMaterialType")
                        .WithMany("PreciousMetalMaterials")
                        .HasForeignKey("PreciousMetalMaterialTypeId")
                        .HasConstraintName("FK_PreciousMetalMaterials_To_PreciousMetalMaterialTypes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JewelryStoreAPI.Domain.Entities.Watch", b =>
                {
                    b.HasOne("JewelryStoreAPI.Domain.Entities.Color", "CaseColor")
                        .WithMany("WatchesWithCaseColors")
                        .HasForeignKey("CaseColorId")
                        .HasConstraintName("FK_WatchesWithCaseColors_To_CaseColors")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JewelryStoreAPI.Domain.Entities.Color", "DialColor")
                        .WithMany("WatchesWithDialColors")
                        .HasForeignKey("DialColorId")
                        .HasConstraintName("FK_WatchesWithDialColors_To_DialColors")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JewelryStoreAPI.Domain.Entities.Color", "StrapColor")
                        .WithMany("WatchesWithStrapColors")
                        .HasForeignKey("StrapColorId")
                        .HasConstraintName("FK_WatchesWithStrapColors_To_StrapColors")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
